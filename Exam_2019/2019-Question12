Question 12 [12 Marks]

In a Pascal’s Triangle, the first row, row #0, has a single element 1. 
Each succeeding row elements are  the  sum  of  the  two  elements  just  above  (if  there  is  only  one  number  just  above,  then  that number is duplicated). 
So the first 5 rows (numbering from zero) are: 

          1
        1   1
      1   2   1
    1   3   3   1
  1   4   6   4   1

Looking at the last row, row #4, we have sums: 0 + 1, 1 + 3, 3 + 3, 3 + 1, 1 + 0 (getting the valuesfrom the row above) to give us 1,4,6,4,1. 
If we push this all left we get: 

1
1  1
1  2  1
1  3  3  1
1  4  6  4  1

Write a functioncalculatePascalRowSeven, with the prototype given below, that calculates row#7 (the eighth row) of Pascal’s triangle, iterating from row #0.  
Do an in-place calculation, so that the result ends up in pascalRow[].  
Do not use any other array. The given main() function prints the result.

Solution: 

#include <stdio.h>

int main(void)
{
   int i = 0, ii = 0, jj = 0, j = 0, count = 0; 
   int pascalRow[]; 
   for(i = 1; i<=7; i++)
   {
      int numerator = i - 1; 
      int denominator = 1; 
      int pascalCharacter = 1; 
      for(jj = 1; jj <= i; jj++)
      {
          if(i == 7)
          {
              pascalRow[count] = pascalCharacter; 
              count++;
          }
          printf("%d ", pascalCharacter); 
          pascalCharacter = pascalCharacter * numerator; 
          pascalCharacter = pascalCharacter / denominator;
          denominator++;
          numerator--; 
      }
      printf("\n");
   }
   printf("\n");
   printf("Pascal's 7th row is: "); 
   for(ii = 0; ii <= count; ii++)
   {
      printf(" %d ", pascalRow[ii]; 
   }
   return 0; 
}

OUTPUT:

1
1 1
1 2 1
1 3 3 1
1 4 6 4 1
1 5 10 10 5 1
1 6 15 20 15 6 1

Pascal's 7th row is: 1 6 15 20 15 6 1
